name: Build and Release Electron App

on:
  pull_request:
    types: [closed]
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      version: ${{ steps.version.outputs.version }}
      major_version: ${{ steps.version.outputs.major_version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get and increment version
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Extract major version number (e.g., "3.0.0" -> "3")
        MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f1)
        echo "Current major version: $MAJOR_VERSION"
        
        # Increment major version
        NEW_MAJOR_VERSION=$((MAJOR_VERSION + 1))
        NEW_VERSION="${NEW_MAJOR_VERSION}.0.0"
        echo "New version: $NEW_VERSION"
        
        # Update package.json
        node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.version = '$NEW_VERSION';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        # Output both the full version and just the major number for tags
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "major_version=$NEW_MAJOR_VERSION" >> $GITHUB_OUTPUT
        
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "Bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push || echo "No changes to push"

  build:
    needs: version
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.merged == true
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main  # Make sure we get the updated version
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React app
      run: npm run build
      
    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run electron-pack
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run electron-pack
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Build Electron app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npm run electron-pack
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
          dist/*.exe.blockmap
          dist/latest.yml
          
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.dmg.blockmap
          dist/latest-mac.yml
          
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.AppImage
          dist/*.AppImage.blockmap
          dist/latest-linux.yml

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      
    - name: Get PR info
      id: pr-info
      run: |
        echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
        echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
        echo "commit_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display artifact structure
      run: |
        echo "=== Artifacts directory structure ==="
        ls -la artifacts/
        echo "=== Windows artifacts ==="
        ls -la artifacts/windows-build/ || echo "No Windows artifacts found"
        echo "=== macOS artifacts ==="
        ls -la artifacts/macos-build/ || echo "No macOS artifacts found"
        echo "=== Linux artifacts ==="
        ls -la artifacts/linux-build/ || echo "No Linux artifacts found"
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.version.outputs.major_version }}
        name: PHEdit v${{ needs.version.outputs.major_version }}
        draft: false
        prerelease: false
        body: |
          ## üöÄ PHEdit v${{ needs.version.outputs.major_version }}
          
          **Built on:** ${{ steps.date.outputs.date }}  
          **From PR:** #${{ steps.pr-info.outputs.pr_number }} - ${{ steps.pr-info.outputs.pr_title }}  
          **Author:** @${{ steps.pr-info.outputs.pr_author }}  
          **Commit:** [`${{ steps.pr-info.outputs.commit_short }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ---
          
          ### üì• Downloads
          
          Choose the appropriate installer for your operating system:
          
          | Platform | Download | Size |
          |----------|----------|------|
          | ü™ü **Windows** | [PHEdit-Setup-${{ needs.version.outputs.version }}-Windows.exe](https://github.com/${{ github.repository }}/releases/download/v${{ needs.version.outputs.major_version }}/PHEdit-Setup-${{ needs.version.outputs.version }}-Windows.exe) | Windows Installer |
          | üçé **macOS** | [PHEdit-${{ needs.version.outputs.version }}-macOS.dmg](https://github.com/${{ github.repository }}/releases/download/v${{ needs.version.outputs.major_version }}/PHEdit-${{ needs.version.outputs.version }}-macOS.dmg) | Disk Image |
          | üêß **Linux** | [PHEdit-${{ needs.version.outputs.version }}-Linux.AppImage](https://github.com/${{ github.repository }}/releases/download/v${{ needs.version.outputs.major_version }}/PHEdit-${{ needs.version.outputs.version }}-Linux.AppImage) | AppImage |
          
          ### üîß Installation Instructions
          
          #### Step 1: Install FFmpeg (Required)
          
          **‚ö†Ô∏è Important**: PHEdit requires FFmpeg (specifically ffmpeg and ffprobe) to be installed on your system before it can function properly.
          
          - **Download FFmpeg**: [https://ffmpeg.org/download.html](https://ffmpeg.org/download.html)
          - **Windows**: Download the Windows build and add it to your system PATH
          - **macOS**: Install via Homebrew: `brew install ffmpeg`
          - **Linux**: Install via package manager: `sudo apt install ffmpeg` (Ubuntu/Debian) or `sudo yum install ffmpeg` (RHEL/CentOS)
          
          #### Step 2: Install PHEdit
          
          - **Windows**: Download and run the `.exe` file
          - **macOS**: Download the `.dmg`, open it, and drag PHEdit to Applications
          - **Linux**: Download the `.AppImage`, make it executable (`chmod +x`), and run it
          
          ### üìã What's New
          
          This build includes the latest changes merged from the development branch:
          - ‚úÖ Cross-platform compatibility (Windows, macOS, Linux)
          - ‚úÖ Latest bug fixes and improvements
          - ‚úÖ Built with Electron ${{ matrix.electron-version || 'latest' }}
          
          ### üêõ Issues?
          
          **Common Issues:**
          - **"FFmpeg not found" error**: Make sure FFmpeg is installed and accessible in your system PATH
          - **Video processing fails**: Verify that both `ffmpeg` and `ffprobe` commands work in your terminal
          
          If you encounter any problems, please [open an issue](https://github.com/${{ github.repository }}/issues/new) with:
          - Your operating system and version
          - FFmpeg version (`ffmpeg -version`)
          - Steps to reproduce the issue
          - Any error messages you see
          
        files: |
          artifacts/windows-build/*.exe
          artifacts/macos-build/*.dmg
          artifacts/linux-build/*.AppImage
        fail_on_unmatched_files: false
